@startuml State Machine in Siever
[*] --> InitComponents

state InitComponents {
    InitComponents: ChannelService init
}

state Timer {
    Timer: * Connect to Radiostation
    Timer: * heartbeat to peers
    Timer: * leader complain
    Timer: * block generate
    Timer: * Subscribe
    Timer: * Shutdown
}

state GracefulShutdown {
    GracefulShutdown: StopTimer: ALL
}

state Consensus {
    Consensus: on_enter { block_height_sync }

    [*] -[thickness=2]-> EvaluateNetwork : trigger::evaluate_network

    state EvaluateNetwork {
        EvaluateNetwork: ready to block height sync
        EvaluateNetwork: select node type
        EvaluateNetwork: initialize network
    }

    state BlockSync {
        BlockSync: Check Highest Block in Network
    }

    state SubscribeNetwork {
        SubscribeNetwork: on_enter {
        SubscribeNetwork: \tStartTimer: Subscribe
        SubscribeNetwork: \tStartTimer: Shutdown
        SubscribeNetwork:}
        SubscribeNetwork: Connect Network (Subscribe to Radiostation, Set peer type)
        SubscribeNetwork: on_exit {
        SubscribeNetwork: \tStopTimer: Subscribe
        SubscribeNetwork: \tStopTimer: Shutdown
        SubscribeNetwork:}
    }

    state Watch {
        Watch: Wait for new block announcement (subscribe_loop)
    }

    state Vote {
        Vote: on_enter {
        Vote: }
        Vote: on_exit {
        Vote: }
        Vote:
        Vote: trigger::vote\n(Recv AnnounceUnConfirmedBlock (block.height == mine + 1))
    }

    state BlockGenerate {
        BlockGenerate: on_enter {
        BlockGenerate: \tAddTimer: heartbeat to peers
        BlockGenerate: \tAddTimer: block generate (default interval = 2 sec.)
        BlockGenerate: }
        BlockGenerate: on_exit {
        BlockGenerate: \tStopTimer: heartbeat to peers
        BlockGenerate: \tStopTimer: block generate
        BlockGenerate: }
    }

    state LeaderComplain {
        LeaderComplain: on_enter {
        LeaderComplain: \tbroadcast complain
        LeaderComplain: }
        LeaderComplain: on_exit {
        LeaderComplain: }
    }
    note top of LeaderComplain
      keep leader complain Timer
      until new leader elected
      leader complain timer start by AddTx(List), and stop by AddBlock
    end note

    state ResetNetwork {
        ResetNetwork: on_enter {
        ResetNetwork: \tClean network
        ResetNetwork: \tevaluate_network
        ResetNetwork: }
    }
}

'----- Relations
' Enter Consensus
InitComponents --> Consensus: trigger::complete_init_components

' In BlockHeightSync
EvaluateNetwork -[thickness=2]-> BlockSync: \ntrigger::block_sync
BlockSync -[thickness=2]-> SubscribeNetwork: Succeeded\ntrigger::complete_sync
SubscribeNetwork -[#green,thickness=2]-> BlockGenerate: <color:green>(if leader)\ntrigger::complete_subscribe
SubscribeNetwork -left[#blue,thickness=2]-> Watch: <color:blue>(if node_type == citizen)\ntrigger::complete_subscribe
SubscribeNetwork -right[#purple,thickness=2]-> Vote: <color:purple>(if not leader)\ntrigger::complete_subscribe

' BlockGenerate
Vote -down-> BlockGenerate : Recv AnnounceUnconfirmedBlock\ntrigger::turn_to_leader\n(if next leader == self)
BlockGenerate -up-> Vote : Send AnnounceUnconfirmedBlock\ntrigger::turn_to_peer\n(block_type == vote)

' Watch
Watch -right-> EvaluateNetwork: Reconnect to RS Peer\n(after connection error)\ntrigger::subscribe_network

' Vote
Vote -up-> EvaluateNetwork: dest::BlockSync\n(block.height >= mine + 2)\ntrigger::block_sync
Vote -right-> LeaderComplain : !Recv heartbeat from leader by Timer (leader complain) \nSend LeaderComplain
LeaderComplain -left-> Vote : Recv AnnounceNewLeader\n(if next leader != self)
LeaderComplain --> BlockGenerate : Send AnnounceNewLeader\n(if next leader == self)

' Into ResetNetwork
Watch -[dashed]-> ResetNetwork : Added a block(role_switch_block_height)\ntrigger::switch_role
Vote -[dashed]-> ResetNetwork : Added a block(role_switch_block_height)\ntrigger::switch_role
BlockSync -[dashed]-> ResetNetwork : Added a block(role_switch_block_height)\ntrigger::switch_role
BlockGenerate -[dashed]-> ResetNetwork : Added a block(role_switch_block_height)\ntrigger::switch_role

'ResetNetwork -> EvaluateNetwork

' Exit Consensus
Consensus --> GracefulShutdown
GracefulShutdown --> [*]

@enduml